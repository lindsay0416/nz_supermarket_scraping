"use strict";

/* eslint-disable global-require */
var createForestAdminClient = require('@forestadmin/forestadmin-client')["default"];
var loggerLevels = {
  Error: 0,
  Warn: 1,
  Info: 2,
  Debug: 3
};
function makeLogger(_ref) {
  var env = _ref.env,
    logger = _ref.logger;
  return function (level) {
    var _env$FOREST_LOGGER_LE;
    var loggerLevel = (_env$FOREST_LOGGER_LE = env.FOREST_LOGGER_LEVEL) !== null && _env$FOREST_LOGGER_LE !== void 0 ? _env$FOREST_LOGGER_LE : 'Info';
    if (loggerLevels[level] <= loggerLevels[loggerLevel]) {
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }
      logger[level.toLowerCase()].apply(logger, args);
    }
  };
}
module.exports.makeLogger = makeLogger;
module.exports["default"] = function (context) {
  return context.addInstance('logger', function () {
    return require('../services/logger');
  }).addUsingFunction('forestAdminClient', function (_ref2) {
    var env = _ref2.env,
      forestUrl = _ref2.forestUrl,
      logger = _ref2.logger;
    return createForestAdminClient({
      envSecret: env.FOREST_ENV_SECRET,
      forestServerUrl: forestUrl,
      logger: makeLogger({
        env: env,
        logger: logger
      }),
      instantCacheRefresh: false
    });
  }).addInstance('chartHandler', function (_ref3) {
    var forestAdminClient = _ref3.forestAdminClient;
    return forestAdminClient.chartHandler;
  }).addUsingClass('authorizationService', function () {
    return require('../services/authorization/authorization')["default"];
  }).addUsingClass('actionAuthorizationService', function () {
    return require('../services/authorization/action-authorization')["default"];
  }).addInstance('pathService', function () {
    return require('../services/path');
  }).addInstance('errorHandler', function () {
    return require('../services/exposed/error-handler');
  }).addInstance('ipWhitelist', function () {
    return require('../services/ip-whitelist');
  }).addInstance('forestServerRequester', function () {
    return require('../services/forest-server-requester');
  }).addInstance('schemasGenerator', function () {
    return require('../generators/schemas');
  }).addInstance('baseFilterParser', function () {
    return require('../services/base-filters-parser');
  }).addUsingClass('projectDirectoryFinder', function () {
    return require('../services/project-directory-finder');
  }).addUsingClass('configStore', function () {
    return require('../services/config-store');
  }).addUsingClass('apimapFieldsFormater', function () {
    return require('../services/apimap-fields-formater');
  }).addUsingClass('authorizationFinder', function () {
    return require('../services/authorization-finder');
  }).addUsingClass('apimapSorter', function () {
    return require('../services/apimap-sorter');
  }).addUsingClass('apimapSender', function () {
    return require('../services/apimap-sender');
  }).addUsingClass('schemaFileUpdater', function () {
    return require('../services/schema-file-updater');
  }).addUsingClass('scopeManager', function () {
    return require('../services/scope-manager');
  }).addUsingClass('modelsManager', function () {
    return require('../services/models-manager');
  }).addUsingClass('tokenService', function () {
    return require('../services/token');
  }).addUsingClass('oidcConfigurationRetrieverService', function () {
    return require('../services/oidc-configuration-retriever');
  }).addUsingClass('oidcClientManagerService', function () {
    return require('../services/oidc-client-manager');
  }).addUsingClass('authenticationService', function () {
    return require('../services/authentication');
  }).addUsingClass('smartActionFieldValidator', function () {
    return require('../services/smart-action-field-validator');
  }).addUsingClass('smartActionHookService', function () {
    return require('../services/smart-action-hook-service');
  }).addUsingClass('smartActionHookDeserializer', function () {
    return require('../deserializers/smart-action-hook');
  });
};